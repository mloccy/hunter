# Copyright (c) 2013, 2015 Ruslan Baratov, Alexandre Pretyman
# All rights reserved.

cmake_minimum_required(VERSION 3.10)
project(Hunter)

include("@HUNTER_SELF@/cmake/Hunter")

include(hunter_user_error)
include(hunter_status_debug)
include(hunter_assert_not_empty_string)
include(ExternalProject) # ExternalProject_Add

hunter_status_debug("Scheme: url_sha1_meson")

# Check preconditions
hunter_assert_not_empty_string("@HUNTER_SELF@")
hunter_assert_not_empty_string("@HUNTER_EP_NAME@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_URL@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_SHA1@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_DOWNLOAD_DIR@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_SOURCE_DIR@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_BUILD_DIR@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_INSTALL_PREFIX@")
hunter_assert_not_empty_string("@HUNTER_INSTALL_PREFIX@")

find_program(MESON meson)

if (NOT MESON)
    hunter_add_package(meson)
    find_program(MESON meson)
    if (NOT MESON)
        hunter_fatal_error(
            "Meson could not be found or installed"
            ERROR_PAGE "error.external.build.failed")
    endif()
endif()

set (Python3_ROOT_DIR "@HUNTER_PACKAGE_INSTALL_PREFIX@")
set (Python_ROOT_DIR "@HUNTER_PACKAGE_INSTALL_PREFIX@")
find_package(Python3 "3.7" COMPONENTS Interpreter)
if (NOT Python3_FOUND OR Python3_VERSION_MINOR LESS 7)
    hunter_add_package(python)
    find_package(Python3 "3.7" COMPONENTS Interpreter)
    if (NOT Python3_FOUND OR Python3_VERSION_MINOR LESS 7)
        if (NOT Python3_FOUND)
            hunter_fatal_error(
                "Python at least 3.7 is required"
                ERROR_PAGE "error.external.build.failed")
        else()
                hunter_fatal_error(
                    "Python at least 3.7 is required but only found 3.${Python3_VERSION_MINOR}"
                    ERROR_PAGE "error.external.build.failed")
        endif()
    endif()
endif()

foreach(dependency ${DEPENDS_ON_PACKAGES})
  hunter_add_package(${dependency})
endforeach()

set(additional_setup_args "")

if (MSVC)
    list(APPEND additional_setup_args --backend=vs)
endif()
ExternalProject_Add(
        "@HUNTER_EP_NAME@"
    URL
        "@HUNTER_PACKAGE_URL@"
    URL_HASH
        SHA1=@HUNTER_PACKAGE_SHA1@
    DOWNLOAD_EXTRACT_TIMESTAMP
        TRUE
    TLS_VERIFY
        "@HUNTER_TLS_VERIFY@"
    DOWNLOAD_DIR
        "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    SOURCE_DIR
        "@HUNTER_PACKAGE_SOURCE_DIR@"
    INSTALL_DIR
      "@HUNTER_PACKAGE_INSTALL_PREFIX@"
    CONFIGURE_COMMAND
    ${Python3_EXECUTABLE} ${MESON} setup "@HUNTER_PACKAGE_BUILD_DIR@"
    BUILD_COMMAND
    ${Python3_EXECUTABLE} ${MESON} compile -C "@HUNTER_PACKAGE_BUILD_DIR@"

    BUILD_IN_SOURCE
        1
    INSTALL_COMMAND
        ""
    )
