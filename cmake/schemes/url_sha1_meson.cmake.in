# Copyright (c) 2013, 2015 Colm Vize
# All rights reserved.

cmake_minimum_required(VERSION 3.10)
project(Hunter)

include("@HUNTER_SELF@/cmake/Hunter")

include(hunter_internal_error)
include(hunter_user_error)
include(hunter_status_debug)
include(hunter_assert_not_empty_string)
include(ExternalProject) # ExternalProject_Add

hunter_status_debug("Scheme: url_sha1_meson")

# Check preconditions
hunter_assert_not_empty_string("@HUNTER_SELF@")
hunter_assert_not_empty_string("@HUNTER_EP_NAME@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_URL@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_SHA1@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_DOWNLOAD_DIR@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_SOURCE_DIR@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_BUILD_DIR@")
hunter_assert_not_empty_string("@HUNTER_PACKAGE_INSTALL_PREFIX@")
hunter_assert_not_empty_string("@HUNTER_INSTALL_PREFIX@")

hunter_add_package(hunter_venv)
find_package(hunter_venv CONFIG REQUIRED)
hunter_add_package(pip_meson)

foreach(dependency ${DEPENDS_ON_PACKAGES})
  hunter_add_package(${dependency})
endforeach()

set(native_file_path "@HUNTER_PACKAGE_DOWNLOAD_DIR@/meson-native.ini")
set (meson_configure_args "")

if (MESON_NATIVE_PROGRAMS_OVERRIDES_HINTS AND MESON_NATIVE_PROGRAMS_OVERRIDES_INI_NAMES)
    list(LENGTH MESON_NATIVE_PROGRAMS_OVERRIDES_HINTS length_1)
    list(LENGTH MESON_NATIVE_PROGRAMS_OVERRIDES_INI_NAMES length_2)
    if (NOT ${length_1} EQUAL ${length_2})
        hunter_internal_error(
            "Improper configuration:
            MESON_NATIVE_PROGRAMS_OVERRIDES_HINTS and
            MESON_NATIVE_PROGRAMS_OVERRIDES_INI_NAMES must have the same length.")
    endif()

    math(EXPR loop_end "${length_1} - 1")

    file(WRITE ${native_file_path} "[binaries]\n")
    foreach (idx RANGE 0 ${loop_end})
        list(GET MESON_NATIVE_PROGRAMS_OVERRIDES_HINTS ${idx} loop_hint)
        list(GET MESON_NATIVE_PROGRAMS_OVERRIDES_INI_NAMES ${idx} loop_name)

        find_program(${loop_name}_PROGRAM_PATH ${loop_hint} REQUIRED)

        file(APPEND "${native_file_path}" "${loop_name} = '${${loop_name}_PROGRAM_PATH}'\n")

    endforeach()

    file(APPEND "${native_file_path}" "python = '${Python3_EXECUTABLE}'\n")
endif()

if (MESON_CONFIGURE_OPTIONS)
    string(REPLACE " " ";" MESON_ADDITIONAL_ARG_LIST ${MESON_CONFIGURE_OPTIONS})
    foreach (dep ${MESON_ADDITIONAL_ARG_LIST})
        list(APPEND meson_configure_args "-D${dep}")
    endforeach()
endif()

set(additional_setup_args "")
set(MSVC_SETUP_STEP "")
if (MSVC)
    list(APPEND MSVC_SETUP_STEP "@HUNTER_MSVC_VCVARSALL@")
    list(APPEND MSVC_SETUP_STEP @HUNTER_MSVC_ARCH@)
    list(APPEND additional_setup_args --backend=vs)
endif()

set(MESON_BUILD_DIR "@HUNTER_PACKAGE_BUILD_DIR@/MesonBuild")
ExternalProject_Add(
        "@HUNTER_EP_NAME@"
    URL
        "@HUNTER_PACKAGE_URL@"
    URL_HASH
        SHA1=@HUNTER_PACKAGE_SHA1@
    DOWNLOAD_EXTRACT_TIMESTAMP
        TRUE
    TLS_VERIFY
        "@HUNTER_TLS_VERIFY@"
    DOWNLOAD_DIR
        "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    SOURCE_DIR
        "@HUNTER_PACKAGE_SOURCE_DIR@"
    INSTALL_DIR
      "@HUNTER_PACKAGE_INSTALL_PREFIX@"
    CONFIGURE_COMMAND
        ${MSVC_SETUP_STEP}
    COMMAND
        ${Python3_EXECUTABLE} -m mesonbuild.mesonmain setup --native-file "${native_file_path}" --prefix @HUNTER_PACKAGE_INSTALL_PREFIX@ ${additional_setup_args} -Dcmake_prefix_path=@HUNTER_PACKAGE_INSTALL_PREFIX@/lib/cmake ${meson_configure_args} "${MESON_BUILD_DIR}"
    BUILD_COMMAND
        ${Python3_EXECUTABLE} -m mesonbuild.mesonmain compile -C "${MESON_BUILD_DIR}"
    BUILD_IN_SOURCE
        1
    INSTALL_COMMAND
    ${Python3_EXECUTABLE} -m mesonbuild.mesonmain install -C "${MESON_BUILD_DIR}"

    )
